package epiphany.ss5.objects;

import jcifs.smb.SmbFile;
import jcifs.smb.SmbException;
import epiphany.ss5.db.SS5FileStorer;
import java.net.MalformedURLException;

/** 
 * Class that contains file information from the indexer 
 * @author Jeffrey Lin
 */
public class SS5File{
	
	//
	//PUBLIC METHODS
	//
	
	/** Object that retrieves file information */
	public SS5File(SS5Server s, int parentID){
		try {
			this.smbFile = new SmbFile("smb://"+s.getIP()+"/");
		} catch (MalformedURLException e) {e.printStackTrace();}
		this.serverName = s.getNetbiosName();
		this.parentID = parentID;
	}
	
	/** Object that retrieves file information */
	public SS5File(SmbFile smbFile, String serverName, int parentID){		
		this.smbFile = smbFile;
		this.serverName = serverName;
		this.parentID = parentID;
	}
	
	/** Method to retrieve and set file information */
	public void setProperties(){
		setReadableURL();
		setSize();
		setLastModified();
		setAttributes();
		setType();
		setIndexDate();
		obtainedProperties = true;
	}
	
	/**
	 * Stores this file entry in the database
	 * @param fs	Storage method to use
	 */
	public void storeEntry(SS5FileStorer fs){
		ID = fs.storeFile(this);
		obtainedID = true;
	}
	
	/**
	 * @return	The children files
	 */
	public SS5File[] getChildren(){
		return _getChildren();
	}
	
	//
	//VARIABLES
	//
	
	//what have we done already?
	boolean obtainedProperties = false;
	boolean obtainedID = false;
	
	//for file house-keeping (will NOT be stored in MySQL) [specified in constructor]
	SmbFile smbFile;
	String serverName;
	
	//ID of parent object (will be stored in MySQL) [specified in constructor]
	int parentID;
	
	//ID of file (will be stored in MySQL) [auto-generated by MySQL]
	int ID;
	
	//file properties (will be stored in MySQL) [obtained from SmbFile]
	String readableUrl;	//url with server name instead of ip
	long size;
	long lastModified;
	boolean ATTR_READONLY;
	boolean ATTR_HIDDEN;
	boolean ATTR_SYSTEM;
	boolean ATTR_VOLUME;
	boolean ATTR_DIRECTORY;	//is this for Active Directory servers?
	boolean ATTR_ARCHIVE;
	int TYPE;
	long indexDate;
	
	
	//
	//HELPER METHODS
	//
	/** Gets and sets the URL for this file */
	protected void setReadableURL(){
		java.net.URL url = smbFile.getURL();
		readableUrl = "smb://" + serverName + url.getPath();
	}
	
	/** Gets and sets the size of this file */
	protected void setSize(){
		try {
			size = isDirectory() ? 0 : smbFile.length();
			//don't use smbFile.getContentLength(), bcz that returns an int
			//which often isn't big enough!
			//instead use smbFile.length() which returns a long
		} catch (SmbException e) {e.printStackTrace();}
	}
	
	/** Gets and sets the last modified date of this file */
	protected void setLastModified(){
		lastModified = smbFile.getLastModified();
	}
	
	/** Gets and sets some Samba attributes of this file */
	protected void setAttributes(){
		try {
			//apparently shares don't return attributes
			int x = smbFile.getAttributes();
			ATTR_READONLY 	= intToBool( (x     ) & 00000001 );
			ATTR_HIDDEN 	= intToBool( (x >> 1) & 00000001 );
			ATTR_SYSTEM 	= intToBool( (x >> 2) & 00000001 );
			ATTR_VOLUME 	= intToBool( (x >> 3) & 00000001 );
			//ATTR_DIRECTORY 	= intToBool( (x >> 4) & 00000001 );
			ATTR_DIRECTORY	= isDirectory() ? true : false;
			ATTR_ARCHIVE 	= intToBool( (x >> 5) & 00000001 );
		} catch (SmbException e) {
			System.out.println("Error code: "+e.getNtStatus()+" for:");
			System.out.println("Access is denied to Attributes for: "+this);
			//e.printStackTrace();}
		}
	}
	
	/** Set the Samba type of this file */
	protected void setType(){
		try {
			TYPE = smbFile.getType();
		} catch (SmbException e) {e.printStackTrace();}
	}

	/** Set the index time of this file */
	protected void setIndexDate(){
		indexDate = (new java.util.Date()).getTime();
	}
	
	/** @return Children files */
	protected SS5File[] _getChildren(){
		if(!obtainedID){return null;}	//return null if we're missing info
		try {
			if(!isDirectory()){	//return empty if not a dir
				return new SS5File[0];
			}
			SmbFile[] files = smbFile.listFiles();
			SS5File[] filesToBeIndexed = new SS5File[files.length]; 
			for(int i=0; i<files.length; i++){
				SmbFile smbFile = files[i];
				String server = this.serverName;
				int parent = this.ID;
				filesToBeIndexed[i] = new SS5File(smbFile, server, parent);
			}
			return filesToBeIndexed;	//return files to be indexed
		} catch (SmbException e) {
			//e.printStackTrace();
			System.out.println("Error code: "+e.getNtStatus()+" for:");
			System.out.println("Access is denied to reading: "+this);
			return new SS5File[0];		//epic fail =[
		}
	}
	
	//
	//HELPER METHODS
	//
	private boolean intToBool(int i){
		if	(i==0)	{return false;}
		else		{return true;}
	}
	
	private boolean isDirectory() throws SmbException{
		return smbFile.isDirectory();
	}
	
	//
	//ACCESSOR METHODS
	//
	
	public int 				getParent()			{	return parentID;		}
	public String 			getURL()			{	return readableUrl;		}
	public long 			getSize()			{	return size;			}
	public long			 	getLastModified()	{	return lastModified;	}
	public boolean			getATTR_ReadOnly()	{	return ATTR_READONLY;	}
	public boolean			getATTR_Hidden()	{	return ATTR_HIDDEN;		}
	public boolean			getATTR_System()	{	return ATTR_SYSTEM;		}
	public boolean			getATTR_Volume()	{	return ATTR_VOLUME;		}
	public boolean			getATTR_Directory()	{	return ATTR_DIRECTORY;	}
	public boolean			getATTR_Archive()	{	return ATTR_ARCHIVE;	}		
	public int				getType()			{	return TYPE;			}
	public long				getIndexDate()		{	return indexDate;		}
	
	/** 
	 * Convenience method to increment the size of the file - typically used
	 * for directories
	 * @param incrementSize	Size to increment by
	 */
	public void	incrementSize(Long incrementSize){	//for directories
		size += incrementSize;
	}
	
	// mainly for debugging
	public String toString(){
		return parentID+";"+readableUrl+";"+size+";"+lastModified+";"+
		ATTR_READONLY+";"+ATTR_HIDDEN+";"+ATTR_SYSTEM+";"+
		ATTR_VOLUME+";"+ATTR_DIRECTORY+";"+ATTR_ARCHIVE+";"+
		TYPE+";"+indexDate;
	}
			
}
